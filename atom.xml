<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZengGUI</title>
  
  <subtitle>ZengGUI 的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://devtor.cn/"/>
  <updated>2017-12-10T05:29:22.085Z</updated>
  <id>http://devtor.cn/</id>
  
  <author>
    <name>ZengGUI</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis逆向工程</title>
    <link href="http://devtor.cn/technology/MyBatis-generator.html"/>
    <id>http://devtor.cn/technology/MyBatis-generator.html</id>
    <published>2017-12-09T12:21:08.000Z</published>
    <updated>2017-12-10T05:29:22.085Z</updated>
    
    <content type="html"><![CDATA[<p>逆向工程字面意思就是反向生成工程, 和 Hibernate一样, MyBatis也有自己的逆向工程工具。详细信息请看<a href="http://www.mybatis.org/generator/index.html" target="_blank" rel="noopener">官方文档</a></p><p>使用MyBatis逆向工程, 我们就不用再手动创建Model实体类以及对应的Mapper.xml文件和dao类；它可以直接连接数据库的表自动帮我们完成这些操作。是不是很方便？其实也只需要简单的几步就可以了。</p><p>首先我们从MyBatis的逆向工程<a href="https://github.com/mybatis/generator/releases" target="_blank" rel="noopener">Github仓库</a>下载最新的jar包,还有MyBatis和MySQL的jar包。</p><h3 id="逆向工程的配置"><a href="#逆向工程的配置" class="headerlink" title="逆向工程的配置"></a>逆向工程的配置</h3><h4 id="1-新建项目，导入Jar包"><a href="#1-新建项目，导入Jar包" class="headerlink" title="1. 新建项目，导入Jar包"></a>1. 新建项目，导入Jar包</h4><p>使用IDEA新建一个Java项目，导入我们刚刚下载的三个jar包。</p><p>1、逆向工程核心包 2、MyBatis3.x jar包    3、MySQL连接jar包。</p><h4 id="2-新建逆向工程的配置文件"><a href="#2-新建逆向工程的配置文件" class="headerlink" title="2.新建逆向工程的配置文件"></a>2.新建逆向工程的配置文件</h4><p>在src包下创建逆向工程的配置文件generatorConfig.xml,直接拷贝官方介绍中的<a href="http://www.mybatis.org/generator/configreference/xmlconfig.html" target="_blank" rel="noopener">XML配置</a>即可.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"testTables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是  false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库连接信息：驱动类、连接地址、用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 默认为false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，</span></span><br><span class="line"><span class="comment">   为true时，把JDBC DECIMAL 和 NUMERIC 类型解析为</span></span><br><span class="line"><span class="comment">java.math.BigDecimal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成Model类的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"cn.devtor.model"</span> <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成mapper映射文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"cn.devtor.mapper"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成Dao接口的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span>  </span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">"cn.devtor.dao"</span> </span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定数据库的表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"book"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 有些表的字段需要指定java类型</span></span><br><span class="line"><span class="comment">         &lt;table schema="" tableName=""&gt;</span></span><br><span class="line"><span class="comment">            &lt;columnOverride column="" javaType="" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;/table&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>XML内容都加了注释，我们只要修改几个地方就可以了</p><ul><li>数据库连接信息 </li><li>生成Model、Mapper、Dao 类的位置</li><li>数据库的表 table</li></ul><h4 id="3-执行代码"><a href="#3-执行代码" class="headerlink" title="3.执行代码"></a>3.执行代码</h4><p>在src包下新建一个Main.java 文件, 内容也是从官方那里Copy过来的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generator</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//指定逆向工程de配置文件</span></span><br><span class="line">        File configFile = <span class="keyword">new</span> File(<span class="string">"src/generatorConfig.xml"</span>);</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config,</span><br><span class="line">                callback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">// write your code here</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Main generatorSqlmap = <span class="keyword">new</span> Main();</span><br><span class="line">            generatorSqlmap.generator();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，等控制台打印出 <code>Process finished with exit code 0</code> 刷新一下文件目录就能看到自动生成的文件了。</p><h3 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h3><ol><li>git clone <a href="https://github.com/ZengGUI/MyBatis-generator.git" target="_blank" rel="noopener">https://github.com/ZengGUI/MyBatis-generator.git</a></li><li>用你的IDEA打开即可。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;逆向工程字面意思就是反向生成工程, 和 Hibernate一样, MyBatis也有自己的逆向工程工具。详细信息请看&lt;a href=&quot;http://www.mybatis.org/generator/index.html&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="technology" scheme="http://devtor.cn/categories/technology/"/>
    
    
      <category term="Java" scheme="http://devtor.cn/tags/Java/"/>
    
      <category term="MyBatis" scheme="http://devtor.cn/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Gogs与Linux共享SSH22端口</title>
    <link href="http://devtor.cn/operation/gogs-and-linux-shares-port22.html"/>
    <id>http://devtor.cn/operation/gogs-and-linux-shares-port22.html</id>
    <published>2017-11-12T11:06:34.000Z</published>
    <updated>2017-12-12T02:31:41.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Gogs 是一个Git服务器, 跟Github 和 GitLab 很像; 但它是用Go语言编写的, 比GitLab更轻量化, 功能也很齐全.</p><p>但是, Gogs不管你是在物理机上面直接搭建的 or 跟我一样使用Docker构建的 Gogs 容器都存在一个问题; 那就是SSH服务已经占用了22端口; 导致你要么更改其他的端口连接到你的服务器或者 Gogs 服务器监听其他的端口上的SSH 连接. 这两种选择对于有强迫症来说, 简直是不能忍!~</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@server_ip:10022/username/project.git#这是非常不好看的.我希望他跟Github一样的整洁</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@server_ip:username/project.git#跟Github一样,完美~~</span><br></pre></td></tr></table></figure><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>下面我就用详细的操作教你, 在Linux 和 Docker - Gogs 之间共享22端口. </p><ul><li><p>新建一个用户 <code>git</code> 并且给它 UID 1000,GID 1000;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adduser git</span></span><br></pre></td></tr></table></figure></li><li><p>下面就可以重新运行Gogs 容器了, 127.0.0.1 环回IP限制只能本地使用SSH服务连接到Gogs, 提高容器的安全性.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name=gogs -v ~git/gogs:/data -p 127.0.0.1:10022:22 -p 3000:3000 \</span></span><br><span class="line"> --link=mysql:db -d gogs/gogs</span><br></pre></td></tr></table></figure></li><li><p>使用刚刚创建的git用户, 创建一个 <code>~git/gogs/git/.ssh</code> 到 <code>~/.ssh</code> 的链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> su git <span class="comment"># 登录git用户</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ln -s ~/gogs/git/.ssh ~/.ssh</span></span><br></pre></td></tr></table></figure></li><li><p>为 git 用户生成一个SSH密钥, 并将其添加到 ‘.ssh/authorized_keys’ 中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -P <span class="string">''</span><span class="comment"># 全部默认即可, 直接回车</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure></li><li><p>为了安全, 还要打开 <code>~git/.ssh/authorized_keys</code>, 在文件最开始添加以下语句:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi ~git/.ssh/authorized_keys<span class="comment"># 打开authorized_keys,然后定位到开头的位置</span></span></span><br><span class="line">no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty </span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加好之后我们查看一下authorized_keys是不是下面这样的形式</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat ~git/.ssh/authorized_keys</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa...</span></span><br></pre></td></tr></table></figure></li><li><p>好了,到了这里就将近完成了90%,离最后的胜利还差一点点操作. 接下来的操作也是最核心关键的. </p><p><code>完成了前面的所有操作之后, 我们现在要退出 git用户,用root来操作了哦</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p /app/gogs/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;/app/gogs/gogs &lt;&lt;<span class="string">'END'</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">ssh -p 10022 -o StrictHostKeyChecking=no git@127.0.0.1 \</span><br><span class="line">"SSH_ORIGINAL_COMMAND=\"$SSH_ORIGINAL_COMMAND\" $0 $@"</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod 755 /app/gogs/gogs<span class="comment"># 授予755权限之后&amp;运行一下</span></span></span><br></pre></td></tr></table></figure><p>然后共享22端口配置就完成了.只剩下web配置就大功告成了.</p></li><li>打开 Chrome浏览器, 把剩下的配置配置完成就OK了. <code>注意:web配置里面的ssh端口要填22了哦</code></li></ul>]]></content>
    
    <summary type="html">
    
      Gogs 是一个Git服务器, 跟Github 和 GitLab 很像; 但它是用Go语言编写的, 比GitLab更轻量化, 功能也很齐全.但是, Gogs不管你是在物理机上面直接搭建的 or 跟我一样使用Docker构建的 Gogs 容器都存在一个问题; 那就是SSH服务已经占用了22端口; 导致你要么更改其他的端口连接到你的服务器或者 Gogs 服务器监听其他的端口上的SSH 连接. 这两种选择对于有强迫症来说, 简直是不能忍!~
    
    </summary>
    
      <category term="operation" scheme="http://devtor.cn/categories/operation/"/>
    
    
      <category term="Docker" scheme="http://devtor.cn/tags/Docker/"/>
    
      <category term="Linux" scheme="http://devtor.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署(五):Nginx</title>
    <link href="http://devtor.cn/operation/docker-nginx.html"/>
    <id>http://devtor.cn/operation/docker-nginx.html</id>
    <published>2017-08-09T02:44:27.000Z</published>
    <updated>2017-12-12T02:45:44.850Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="operation" scheme="http://devtor.cn/categories/operation/"/>
    
    
      <category term="Docker" scheme="http://devtor.cn/tags/Docker/"/>
    
      <category term="Linux" scheme="http://devtor.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署(四):Gogs</title>
    <link href="http://devtor.cn/operation/docker-gogs.html"/>
    <id>http://devtor.cn/operation/docker-gogs.html</id>
    <published>2017-08-08T13:05:52.000Z</published>
    <updated>2017-12-11T16:04:52.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GitHub已经成为首选的代码托管平台，因为它又很多很棒的功能，操作简单，几乎所有的开发者都喜欢它。但如果你正在写一个Project, 不想让别人看到你的代码, 该怎么办呢？</p><p>Github上可以购买私人的仓库,  但是对于我们学生党来说，是不会也没有必要花这个钱的, 我们完全可以自己动手创建一个git私人服务器。Gitlab 和 Gogs 这两个都是非常棒的,功能上都跟github差不多.Gogs使用 Go 语言开发能够通过独立的二进制分发，并且支持 Go 语言支持的 <strong>所有平台</strong>，包括 Linux、Mac OS X、Windows 以及 ARM 平台。<em><code>Gogs占用资源少,更加的轻量化,界面也比较美观</code></em>。</p><table><thead><tr><th>特性</th><th>Gogs</th><th>Gitlab</th><th>Github</th></tr></thead><tbody><tr><td>Dashboard &amp; File Browser</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>Issue Tracking, Milestones &amp; Commit keywords</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>Organizations support</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>Wiki</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>Code Review</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>Code Snippets</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>Web Hooks</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>Git Hooks</td><td>Y</td><td>* Enterprise</td><td>* Enterprise</td></tr><tr><td>LDAP Login</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>LDAP Group Sync</td><td>N</td><td>* Enterprise</td><td>* Enterprise</td></tr><tr><td>Branded Login Page</td><td>N</td><td>* Enterprise</td><td>* Enterprise</td></tr><tr><td>Language</td><td>Go</td><td>Ruby</td><td>Ruby</td></tr><tr><td>Platform</td><td>Cross-Platform</td><td>Linux</td><td>* Virtual Machine</td></tr><tr><td>License</td><td>MIT</td><td>MIT</td><td>Proprietary</td></tr><tr><td>Resource Usage</td><td>Low</td><td>Medium/High</td><td>Medium/High</td></tr></tbody></table><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ul><li>新建 git 用户</li><li>创建Volume卷映射路径</li><li>创建 gogs数据库</li><li>构建Gogs 容器</li><li>配置web</li><li>(可选) nginx反向代理配置</li></ul><p>注意, Gogs运行需要MySQL服务器或者SQLite数据库; 如果没有可以翻看我这之前的博客 <a href="/operation/docker-mysql.html">Docker部署(二):MySQL数据库</a> or 自行安装.</p><h3 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h3><p>Gogs默认以git用户运行, 虽然我们用的 Docker 但是为了与Gogs保持一致,这一步操作很重要,具体我会在后面的的文章会讲解.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> su adduser git</span></span><br></pre></td></tr></table></figure><p>git 用户创建完成后,可以用<code>su git</code>登录,使用’cd ~’切换到用户目录.</p><h3 id="创建Volume卷映射路径"><a href="#创建Volume卷映射路径" class="headerlink" title="创建Volume卷映射路径"></a>创建Volume卷映射路径</h3><p>就在当前 git 用户的目录下面新建一个 <code>gogs</code> 目录来映射Volume保存gogs的所有数据.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir  ~/gogs</span></span><br></pre></td></tr></table></figure><h3 id="创建gogs数据库"><a href="#创建gogs数据库" class="headerlink" title="创建gogs数据库"></a>创建gogs数据库</h3><p>在构建Gogs容器前,让我们做完最后一个准备步骤,就是创建Gogs容器依赖的数据库<code>gogs</code> 然后创建一个新用户gogs,并将<code>gogs</code>数据库的所有权限都赋予该用户.</p><p>现在我们还以<code>git</code>用户的身份登录着,我们现在要退出git 用户并切换到 root.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">exit</span>    </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> su docker <span class="built_in">exec</span> -it mysql mysql -u root -p</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># 输入密码</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> create database gogs;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> create user <span class="string">'gogs'</span>@<span class="string">'localhost'</span> identified by <span class="string">'密码'</span>;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> grant all privileges on gogs.* to <span class="string">'gogs'</span>@<span class="string">'localhost'</span>;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">exit</span>;</span></span><br></pre></td></tr></table></figure><h3 id="构建Gogs-容器"><a href="#构建Gogs-容器" class="headerlink" title="构建Gogs 容器"></a>构建Gogs 容器</h3><p>在 <code>root</code> 下执行Gogs的容器构建.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name=gogs -d -v ~git/gogs:/data -p 10022:22 -p 3000:3000 \</span></span><br><span class="line">--link=mysql:db gogs/gogs</span><br></pre></td></tr></table></figure><p><code>--link</code> 属性: 容器互联. 比如: –link=mysql:<font color="red">db</font>, 连接  <a href="/operation/docker-mysql.html">Docker部署(二):MySQL数据库</a> 这篇博客中创建的name=mysql 的MySQL容器, 标记红色的 db 相当于在Gogs容器中的/etc/hosts文件中增加一个额外的name主机名，这个名字为mysql的容器的IP地址的别名。这使得容器的内部进程可以访问主机名为mysql的容器而不用知道它的ip.</p><h3 id="配置web"><a href="#配置web" class="headerlink" title="配置web"></a>配置web</h3><p>打开Chrome输入<code>http://ip:3000</code> 就能看到gogs的各项配置了.</p><p>数据库类型: <code>MySQL</code></p><p>数据库主机: <code>db:3306</code></p><p>数据库用户: <code>gogs</code></p><p>…</p><p>域名: <code>ip或者域名</code></p><p>ssh端口: <code>10022</code>      ssh端口这个可以查看构建命令中的-p, 或者在构建的时候指定你自己的端口即可,<strong><em> 但是不能为22 端口</em></strong> 原因不用我说都应该知道.</p><p>HTTP 端口号: <code>3000</code> </p><p>应用URL: <code>http://ip:3000/</code></p><p>可选配置中,你可以根据自己的需要设置既可.<br>然后点立即安装就大功告成了.</p>]]></content>
    
    <summary type="html">
    
      GitHub已经成为首选的代码托管平台。 因为它又很多很棒的功能，操作简单，几乎所有的开发者都喜欢它。但是对于自建git服务器来说,Gogs可能是比Gitlab更好的选择...
    
    </summary>
    
      <category term="operation" scheme="http://devtor.cn/categories/operation/"/>
    
    
      <category term="Docker" scheme="http://devtor.cn/tags/Docker/"/>
    
      <category term="Linux" scheme="http://devtor.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署(三):Apache Tomcat</title>
    <link href="http://devtor.cn/operation/docker-tomcat.html"/>
    <id>http://devtor.cn/operation/docker-tomcat.html</id>
    <published>2017-08-07T13:01:57.000Z</published>
    <updated>2017-12-11T14:35:27.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Apache Tomcat（或简称Tomcat）是由Apache Software Foundation（ASF）开发的一个开源Web服务器和servlet容器。Tomcat从Oracle实现Java Servlet和JavaServer Pages（JSP）规范，并为要运行的Java代码提供“纯Java”HTTP Web服务器环境。在最简单的配置中，Tomcat运行在单个操作系统进程中。该进程运行一个Java虚拟机（JVM）。从浏览器到Tomcat的每个HTTP请求都在Tomcat进程中的一个单独的线程中处理。</p><p>对于每一个学习Java Web的来说, 最开始接触的一定是这个tomcat服务器, 我们一般在本地运行打包并不会有任何的问题, 但是当你把你的web项目打包成war发布到生产环境时, 你一定会发现jre版本跟开发版本不一致跑不起来。这时候你上Docker Tomcat容器, 可以任意的切换各个版本的Tomcat以及jre…</p><h3 id="Tomcat-容器"><a href="#Tomcat-容器" class="headerlink" title="Tomcat 容器"></a>Tomcat 容器</h3><p>官方提供的版本 <code>tag</code> 以及Dockerfile</p><ul><li><a href="https://github.com/docker-library/tomcat/blob/5802aa060091bb2b18aee4f98a83a155540b978a/7/jre7/Dockerfile" target="_blank" rel="noopener">Tomcat7/jre7</a>:<code>7.0.82-jre7</code>, <code>7.0-jre7</code>, <code>7-jre7</code>, <code>7.0.82</code>, <code>7.0</code>, <code>7</code></li><li><a href="https://github.com/docker-library/tomcat/blob/5a78361a9ce7ef48979acbcabe2acd9342d0168a/7/jre7-alpine/Dockerfile" target="_blank" rel="noopener">Tomcat7/jre7-alpine</a>:<code>7.0.82-jre7-alpine</code>,<code>7.0-jre7-alpine</code>,<code>7-jre7-alpine</code>,<code>7.0.82-alpine</code>,<code>7.0-alpine</code>,<code>7-alpine</code></li><li><a href="https://github.com/docker-library/tomcat/blob/5a78361a9ce7ef48979acbcabe2acd9342d0168a/7/jre8-alpine/Dockerfile" target="_blank" rel="noopener">Tomcat7/jre8</a>:<code>7.0.82-jre8-alpine</code>,<code>7.0-jre8-alpine</code>,<code>7-jre8-alpine</code></li><li><a href="https://github.com/docker-library/tomcat/blob/1b5b0791e065d9bfdfe84235faf7f77c157ff70d/8.0/jre7/Dockerfile" target="_blank" rel="noopener">Tomcat7/jre8-alpine</a>:<code>8.0.47-jre7</code>,<code>8.0-jre7</code>,<code>8.0.47</code>，<code>8.0</code></li><li><a href="https://github.com/docker-library/tomcat/blob/1b5b0791e065d9bfdfe84235faf7f77c157ff70d/8.0/jre7/Dockerfile" target="_blank" rel="noopener">Tomcat8.0/jre7</a>: <code>8.0.47-jre7</code>, <code>8.0-jre7</code>, <code>8.0.47</code>, <code>8.0</code></li><li><a href="https://github.com/docker-library/tomcat/blob/5a78361a9ce7ef48979acbcabe2acd9342d0168a/8.0/jre7-alpine/Dockerfile" target="_blank" rel="noopener">Tomcat8.0/jre-alpine</a>:<code>8.0.47-jre7-alpine</code>, <code>8.0-jre7-alpine</code>, <code>8.0.47-alpine</code>, <code>8.0-alpine</code></li><li><a href="https://github.com/docker-library/tomcat/blob/1b5b0791e065d9bfdfe84235faf7f77c157ff70d/8.0/jre8/Dockerfile" target="_blank" rel="noopener">Tomcat8.0/jre8</a>:<code>8.0.47-jre8</code>, <code>8.0-jre8</code></li><li><a href="https://github.com/docker-library/tomcat/blob/5a78361a9ce7ef48979acbcabe2acd9342d0168a/8.0/jre8-alpine/Dockerfile" target="_blank" rel="noopener">Tomcat8.0/jre8-alpine</a>:<code>8.0.47-jre8-alpine</code>, <code>8.0-jre8-alpine</code></li><li><a href="https://github.com/docker-library/tomcat/blob/d9a438155caff88fad8114297954e2347b534ce3/8.5/jre8/Dockerfile" target="_blank" rel="noopener">Tomcat8.5/jre8</a>:<code>8.5.24-jre8</code>, <code>8.5-jre8</code>, <code>8-jre8</code>, <code>jre8</code>, <code>8.5.24</code>, <code>8.5</code>, <code>8</code>, <code>latest</code></li><li><a href="https://github.com/docker-library/tomcat/blob/efab5942d355f9bac6f6e2a99d82a40a564bef3c/8.5/jre8-alpine/Dockerfile" target="_blank" rel="noopener">Tomcat8.5/jre8-alpine</a>:<code>8.5.24-jre8-alpine</code>, <code>8.5-jre8-alpine</code>, <code>8-jre8-alpine</code>, <code>jre8-alpine</code>, <code>8.5.24-alpine</code>, <code>8.5-alpine</code>, <code>8-alpine</code>, <code>alpine</code></li><li><a href="https://github.com/docker-library/tomcat/blob/8c3a43c1c4f400ab9dfe6c5fe638b9c5264392c5/9.0/jre8/Dockerfile" target="_blank" rel="noopener">Tomcat9.0/jre8</a>:<code>9.0.2-jre8</code>, <code>9.0-jre8</code>, <code>9-jre8</code>, <code>9.0.2</code>, <code>9.0</code>, <code>9</code></li><li><a href="https://github.com/docker-library/tomcat/blob/b6a8794a995e0f482a3832b7c7041eec9a804f2a/9.0/jre8-alpine/Dockerfile" target="_blank" rel="noopener">Tomcat9.0/jre-alpine</a>:<code>9.0.2-jre8-alpine</code>, <code>9.0-jre8-alpine</code>, <code>9-jre8-alpine</code>, <code>9.0.2-alpine</code>, <code>9.0-alpine</code>, <code>9-alpine</code></li></ul><h2 id="下载运行Tomcat容器"><a href="#下载运行Tomcat容器" class="headerlink" title="下载运行Tomcat容器"></a>下载运行Tomcat容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name=tomcat -p 8080:8080 -d tomcat:9.0-alpine</span></span><br></pre></td></tr></table></figure><p>我们知道了镜像的版本, 可以直接运行容器, 在运行的时候会自动从远程中拉取镜像到本地; 好了，现在打开你的Chrome输入<code>http://ip:8080</code>即可看到tomcat欢迎页面了。</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p> <em>Tomcat7、8、9镜像的默认环境是：</em></p><p>你可以使用Docker的<code>Volume</code> -v把容器内的文件绑定到物理机，方便数据的备份与传递。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">JRE_HOME:        /usr</span><br><span class="line">CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br></pre></td></tr></table></figure><p>Tomcat容器部署应用有两种方式。</p><ul><li><p>静态部署: 把你准备好的war包上传到tomcat/webapps目录下即可。</p></li><li><p>动态部署: 可以在服务器启动之后部署web应用程序，而不用重新启动服务器。需要你修改tomcat/conf/tomcat-users.xml 新增一个<code>manager-gui</code>的角色role</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;role rolename="manager-gui"/&gt;</span><br><span class="line">&lt;user username="tomcat" password="tomcat" roles="manager-gui"/&gt;</span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      对于每一个学习Java Web的来说, 最开始接触的一定是这个tomcat服务器, 我们一般在本地运行打包并不会有任何的问题, 但是当你把你的web项目打包成war发布到生产环境时, 你一定会发现jre版本跟开发版本不一致跑不起来。这时候你上Docker Tomcat容器, 可以任意的切换各个版本的Tomcat以及jre...
    
    </summary>
    
      <category term="operation" scheme="http://devtor.cn/categories/operation/"/>
    
    
      <category term="Docker" scheme="http://devtor.cn/tags/Docker/"/>
    
      <category term="Linux" scheme="http://devtor.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署(二):MySQL数据库</title>
    <link href="http://devtor.cn/operation/docker-mysql.html"/>
    <id>http://devtor.cn/operation/docker-mysql.html</id>
    <published>2017-08-06T07:31:19.000Z</published>
    <updated>2017-12-11T11:14:05.705Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker-容器构建"><a href="#Docker-容器构建" class="headerlink" title="Docker 容器构建"></a>Docker 容器构建</h3><ul><li>使用Dockerfile构建镜像</li><li>使用官方提供的Docker镜像</li></ul><h4 id="所谓Dockerfile"><a href="#所谓Dockerfile" class="headerlink" title="所谓Dockerfile"></a>所谓Dockerfile</h4><p>Dockerfile是一种被Docker程序解释的脚本，Dockerfile由一条一条的指令组成，每条指令对应Linux下面的一条命令。Docker程序将这些Dockerfile指令翻译真正的Linux命令。Dockerfile有自己书写格式和支持的命令，Docker程序解决这些命令间的依赖关系，类似于Makefile。Docker程序将读取Dockerfile，根据指令生成定制的image。相比image这种黑盒子，Dockerfile这种显而易见的脚本更容易被使用者接受，它明确的表明image是怎么产生的。有了Dockerfile，当我们需要定制自己额外的需求时，只需在Dockerfile上添加或者修改指令，重新生成image即可，省去了敲命令的麻烦。</p><blockquote><p>不过这里只介绍Dockerfile构建容器的步骤，接下来的文章都是以第二种方式, <strong>使用官方提供的Docker镜像来部署</strong>。</p></blockquote><h3 id="下载MySQL官方提供的Docker镜像"><a href="#下载MySQL官方提供的Docker镜像" class="headerlink" title="下载MySQL官方提供的Docker镜像"></a>下载MySQL官方提供的Docker镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql:tag</span></span><br></pre></td></tr></table></figure><p><em>:tag</em> 是你想从官方拉取的版本(例如5.5, 5.6, 5.7 或者latest )。如果省略 <em>tag</em> 则拉取当前最新的版本, 即latest。</p><p>可以使用以下的命令列出下载Docker镜像:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line"></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mysql               5.7                 dd0afb9bc4a9        3 days ago          408MB</span><br><span class="line">mysql               latest              dd0afb9bc4a9        3 days ago          408MB</span><br></pre></td></tr></table></figure><h3 id="启动MySQL服务器"><a href="#启动MySQL服务器" class="headerlink" title="启动MySQL服务器"></a>启动MySQL服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name=mysql -e MYSQL_ROOT_PASSWORD=root -v /app/mysql:/var/lib/mysql -d mysql</span></span><br></pre></td></tr></table></figure><p><code>--name=mysql</code> 这个属性是为启动的MySQL容器设置一个别名</p><p><code>-d</code> 以守护进程方式运行 (后台运行)</p><p><code>-e MYSQL_ROOT_PASSWORD</code>在启动MySQL的时候设置密码,这里密码以root演示</p><p><code>-v /app/mysql/:/var/lib/mysql</code> 通过Volume把容器内的文件映射到物理机</p><h3 id="查看MySQL的日志"><a href="#查看MySQL的日志" class="headerlink" title="查看MySQL的日志"></a>查看MySQL的日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker logs mysql</span></span><br></pre></td></tr></table></figure><h3 id="连接MySQL服务器"><a href="#连接MySQL服务器" class="headerlink" title="连接MySQL服务器"></a>连接MySQL服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it mysql mysql -u root -p</span></span><br></pre></td></tr></table></figure><p>提示输入密码的时候，输入刚刚创建的时候指定的密码就ok了。现在你就能随意使用的MySQL服务器咯。</p><p>修改 MySQL密码：<code>$ ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;新密码&#39;;</code> </p><h3 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker restart mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker stop mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker start mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rm mysql</span></span><br></pre></td></tr></table></figure><p>注意，当你想要使用<code>docker rm mysql</code> 之前，请记得先停止容器(docker stop mysql)的运行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Docker-容器构建&quot;&gt;&lt;a href=&quot;#Docker-容器构建&quot; class=&quot;headerlink&quot; title=&quot;Docker 容器构建&quot;&gt;&lt;/a&gt;Docker 容器构建&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用Dockerfile构建镜像&lt;/li&gt;
&lt;li&gt;使用
      
    
    </summary>
    
      <category term="operation" scheme="http://devtor.cn/categories/operation/"/>
    
    
      <category term="Docker" scheme="http://devtor.cn/tags/Docker/"/>
    
      <category term="Linux" scheme="http://devtor.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署(一):服务器架构</title>
    <link href="http://devtor.cn/operation/docker-framework.html"/>
    <id>http://devtor.cn/operation/docker-framework.html</id>
    <published>2017-08-06T05:58:11.000Z</published>
    <updated>2017-12-11T11:13:51.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Docker 容器技术作为近年来最受欢迎的开源技术，只要简单的几行语句就能部署运行一个容器。Docker轻巧，且易移植，号称“build once, configure once and run anywhere”，这是其能迅速流行起来的原因之一。</p><p>Docker是现在开发应用程序的不错选择；因为对于一个研发组来说，部署一个应用再也不用像以前那样繁琐的修改、设置配置文件了；因为对于Docker来说它“屏蔽”了应用程序的运行环境，不管你使用Mac、Linux还是Windows都能用相同的方式运行。</p><h3 id="Docker-部署"><a href="#Docker-部署" class="headerlink" title="Docker 部署"></a>Docker 部署</h3><p>我们可以很容易的启动一个Docker容器，但是我们要怎么在生产环境下使用Docker容器呢？</p><p>Docker的安装可以参考我之前的文章, <a href="/operation/ubuntu-install-docker.html">Ubuntu安装Docker CE并配置加速器</a> 和 <a href="/operation/centos-install-dockerce.html">Centos安装Docker CE并配置加速器</a></p><p>在这里我使用自己的案例，简单记录一下，服务器上的所有应用都使用Docker容器构建部署。</p><ul><li>Nginx 服务器</li><li>Tomcat 服务器</li><li>MySQL 数据库</li><li>Gogs 代码托管</li></ul><p>Nginx作为前端负载同时配置反向代理，接收所有的流量并分发给其他的应用容器。MySQL作为底层容器，负责所有的的数据库连接操作；Tomcat 服务器和Gogs 代码托管通过Docker的<code>--link</code> 属性连接MySQL。</p><p>详细配置信息，请看下一篇博客。</p>]]></content>
    
    <summary type="html">
    
      Docker 容器技术作为近年来最受欢迎的开源技术，只要简单的几行语句就能部署运行一个容器。Docker轻巧，且易移植，号称“build once, configure once and run anywhere”，这是其能迅速流行起来的原因之一。目前我们已经能在生产环境中越来越多的见到Docker容器的应用了。
    
    </summary>
    
      <category term="operation" scheme="http://devtor.cn/categories/operation/"/>
    
    
      <category term="Docker" scheme="http://devtor.cn/tags/Docker/"/>
    
      <category term="Linux" scheme="http://devtor.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>正方教务系统-批量自动评价教学质量评价功能</title>
    <link href="http://devtor.cn/technology/ZF-Evaluation.html"/>
    <id>http://devtor.cn/technology/ZF-Evaluation.html</id>
    <published>2017-06-08T07:30:30.000Z</published>
    <updated>2017-12-09T07:08:10.082Z</updated>
    
    <content type="html"><![CDATA[<p><a href="javascript:(function(){var script=document.createElement('script');script.type='text/javascript';script.src='https://rawgit.com/ZengGUI/ZF-Evaluation/master/script.js';document.getElementsByTagName('head')[0].appendChild(script);})()" target="_blank" rel="noopener"><button type="button" onclick="alert('你需要把我拖拽到书签栏里面喔！')"><del>教学一键评价</del></button></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript: (function() &#123;var script = document.createElement('script');script.type = 'text/javascript';script.src = 'https://rawgit.com/ZengGUI/ZF-Evaluation/master/script.js';document.getElementsByTagName('head')[0].appendChild(script);&#125;)()"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"alert('你需要把我拖拽到书签栏里面喔！')"</span>&gt;</span>教学一键评价<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用方法1："><a href="#使用方法1：" class="headerlink" title="使用方法1："></a>使用方法1：</h3><ul><li>PS：浏览器推荐使用 Chrome， Safari， Firefox 等</li><li>创建一个新的HTML文件，把上面的代码复制进去</li><li>打开刚刚创建的html文件，把<strong>教学一键评价</strong>按钮拖到书签栏</li><li>登录教务管理系统，点击进入教学质量评价，选中<strong>第一门</strong>需要评价的课程</li><li>在评价页面点击书签栏的你刚才拖拽的按钮，就会自动完成所有评价</li><li>等待一会儿会提示你<strong>评价完成</strong> ，然后点一下<strong>提交</strong> 就好啦</li></ul><h3 id="使用方法2："><a href="#使用方法2：" class="headerlink" title="使用方法2："></a>使用方法2：</h3><ul><li>登录教务管理系统，点击进入教学质量评价，选中<strong>第一门</strong>需要评价的课程</li><li>在浏览器中按 <strong>F12</strong>打开，然后切换到控制台(Console) </li><li>复制下面的js代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">script.src = <span class="string">'https://rawgit.com/ZengGUI/ZF-Evaluation/master/script.js'</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(script);</span><br></pre></td></tr></table></figure><ul><li><p>粘贴到控制台，回车运行 ，就会自动完成所有评价，提示<strong>评价完成</strong>，点<strong>提交</strong>就可以了</p><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      正方教务管理系统-批量自动评价教学质量评价功能
    
    </summary>
    
      <category term="technology" scheme="http://devtor.cn/categories/technology/"/>
    
    
      <category term="JavaScript" scheme="http://devtor.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Centos安装Docker CE并配置加速器</title>
    <link href="http://devtor.cn/operation/centos-install-dockerce.html"/>
    <id>http://devtor.cn/operation/centos-install-dockerce.html</id>
    <published>2017-03-16T11:43:00.000Z</published>
    <updated>2017-12-09T07:44:27.690Z</updated>
    
    <content type="html"><![CDATA[<p>PS:有关Docker版本就不重新介绍了，可以看我的上一篇博客<a href="/operation/ubuntu-install-docker.html">Ubuntu16.04安装Docker CE 并配置加速器</a></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1、安装<em>Docker</em>，需要64位版本的<em>Centos 7</em></p><p>2、如果之前安装过旧版本的Docker，请先卸载;首次安装请跳过此步骤。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker <span class="string">\</span></span><br><span class="line">                  docker-common <span class="string">\</span></span><br><span class="line">                  container-selinux <span class="string">\</span></span><br><span class="line">                  docker-selinux <span class="string">\</span></span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><p>准备完以上步骤，就可以正式开始在<em>Centos</em>上安装<em>Docker CE</em></p><h3 id="开始安装Docker"><a href="#开始安装Docker" class="headerlink" title="开始安装Docker"></a>开始安装Docker</h3><p>Docker有两种安装方式，分为存储库和包安装;官方指南推荐存储库安Docker，方便安装和升级任务；因此接下来我将以存储库的方式安装Docker。</p><p>1、安装   yum-utils  ,它可以提供  yum-config-manager  来管理repository及扩展包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure><p>2、设置稳定的存储库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager \</span></span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>3、更新  yum  包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum makecache fast</span></span><br></pre></td></tr></table></figure><p>4、安装最新版本的Docker CE</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce</span></span><br></pre></td></tr></table></figure><p>5、启动Docker CE</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure><p>至此Docker CE就安装完成了，可以通过运行  hello-world 镜像验证是否已经正确安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure><h3 id="配置国内镜像加速器"><a href="#配置国内镜像加速器" class="headerlink" title="配置国内镜像加速器"></a>配置国内镜像加速器</h3><p>1、使用我的 DaoCloud 加速器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | \</span></span><br><span class="line">sh -s http://8ad7943c.m.daocloud.io</span><br></pre></td></tr></table></figure><p>2、重启Docker，就能正常下载部署镜像了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run hello-world</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Centos 7.2 64位, 安装Docker CE实践并配置加速器
    
    </summary>
    
      <category term="operation" scheme="http://devtor.cn/categories/operation/"/>
    
    
      <category term="Docker" scheme="http://devtor.cn/tags/Docker/"/>
    
      <category term="Linux" scheme="http://devtor.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装Docker CE并配置加速器</title>
    <link href="http://devtor.cn/operation/ubuntu-install-docker.html"/>
    <id>http://devtor.cn/operation/ubuntu-install-docker.html</id>
    <published>2017-03-13T15:50:00.000Z</published>
    <updated>2017-12-11T12:17:39.080Z</updated>
    
    <content type="html"><![CDATA[<p>PS：Ubuntu16.04 64位, 安装Docker CE 17.03, 并配置 DaoCloud 加速器</p><h3 id="Docker目前分为两个版本："><a href="#Docker目前分为两个版本：" class="headerlink" title="Docker目前分为两个版本："></a>Docker目前分为两个版本：</h3><ul><li>Docker Enterprise Edition (Docker EE) 专为企业开发和IT团队设计，用于在大规模生产中构建，运送和运行关键业务应用程序。Docker EE集成，认证和支持，为企业提供业界最安全的容器平台，使所有应用程序现代化。</li><li>Docker Community Edition (Docker CE) 是开发人员和小团队的理想选择，希望开始使用Docker并尝试基于容器的应用程序。Docker CE可在许多平台上使用，从桌面到云到服务器。</li></ul><p>准备工作：</p><h4 id="1、安装docker前需要确保拥有root权限，并且是以下64位的Ubuntu版本之一："><a href="#1、安装docker前需要确保拥有root权限，并且是以下64位的Ubuntu版本之一：" class="headerlink" title="1、安装docker前需要确保拥有root权限，并且是以下64位的Ubuntu版本之一："></a>1、安装docker前需要确保拥有root权限，并且是以下64位的Ubuntu版本之一：</h4><ul><li>Ubuntu 16.10</li><li>Ubuntu 16.04(LTS)</li><li>Ubuntu 14.04(LTS)</li></ul><h4 id="2、如此你此前安装过docker-engine-需要先卸载它们："><a href="#2、如此你此前安装过docker-engine-需要先卸载它们：" class="headerlink" title="2、如此你此前安装过docker-engine,需要先卸载它们："></a>2、如此你此前安装过docker-engine,需要先卸载它们：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine</span><br></pre></td></tr></table></figure><h4 id="3、安装-Docker-的AUFS存储驱动程序-强烈建议Ubuntu-14-04用户安装"><a href="#3、安装-Docker-的AUFS存储驱动程序-强烈建议Ubuntu-14-04用户安装" class="headerlink" title="3、安装 Docker 的AUFS存储驱动程序,强烈建议Ubuntu 14.04用户安装."></a>3、安装 Docker 的AUFS存储驱动程序,强烈建议Ubuntu 14.04用户安装.</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install \</span><br><span class="line">linux-image-extra-$(uname -r) \</span><br><span class="line">linux-image-extra-virtual</span><br></pre></td></tr></table></figure><h3 id="开始安装Docker-CE"><a href="#开始安装Docker-CE" class="headerlink" title="开始安装Docker CE"></a>开始安装Docker CE</h3><h4 id="1、安装docker包"><a href="#1、安装docker包" class="headerlink" title="1、安装docker包"></a>1、安装docker包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><h4 id="2、添加Docker的官方GPG密钥："><a href="#2、添加Docker的官方GPG密钥：" class="headerlink" title="2、添加Docker的官方GPG密钥："></a>2、添加Docker的官方GPG密钥：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><h4 id="3、设置stable稳定的仓库-stable稳定版每季度发布一次，Edge版每月一次"><a href="#3、设置stable稳定的仓库-stable稳定版每季度发布一次，Edge版每月一次" class="headerlink" title="3、设置stable稳定的仓库(stable稳定版每季度发布一次，Edge版每月一次)"></a>3、设置stable稳定的仓库(stable稳定版每季度发布一次，Edge版每月一次)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository \</span><br><span class="line">        <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">        <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">        stable"</span></span><br></pre></td></tr></table></figure><h4 id="4、更新apt包"><a href="#4、更新apt包" class="headerlink" title="4、更新apt包"></a>4、更新apt包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><h4 id="5、安装Docker-CE"><a href="#5、安装Docker-CE" class="headerlink" title="5、安装Docker CE"></a>5、安装Docker CE</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install docker-ce</span><br></pre></td></tr></table></figure><h4 id="6、运行Docker"><a href="#6、运行Docker" class="headerlink" title="6、运行Docker"></a>6、运行Docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="至此Docker-CE就安装完成了，但是国内访问Docker-Hub有时会遇到问题，所以我们可以配置镜像加速器。例如："><a href="#至此Docker-CE就安装完成了，但是国内访问Docker-Hub有时会遇到问题，所以我们可以配置镜像加速器。例如：" class="headerlink" title="至此Docker CE就安装完成了，但是国内访问Docker Hub有时会遇到问题，所以我们可以配置镜像加速器。例如："></a>至此Docker CE就安装完成了，但是国内访问Docker Hub有时会遇到问题，所以我们可以配置镜像加速器。例如：</h4><ul><li>阿里云加速器</li><li>DaoCloud加速器</li><li>灵雀云加速器</li></ul><h4 id="如果想省去注册账号的一系列动作，可以使用我的DaoCloud加速器。"><a href="#如果想省去注册账号的一系列动作，可以使用我的DaoCloud加速器。" class="headerlink" title="如果想省去注册账号的一系列动作，可以使用我的DaoCloud加速器。"></a>如果想省去注册账号的一系列动作，可以使用我的DaoCloud加速器。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | \</span><br><span class="line">sh -s http://8ad7943c.m.daocloud.io</span><br></pre></td></tr></table></figure><h4 id="之后重启docker，就能下载部署镜像了"><a href="#之后重启docker，就能下载部署镜像了" class="headerlink" title="之后重启docker，就能下载部署镜像了"></a>之后重启docker，就能下载部署镜像了</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart docker</span><br><span class="line">$ docker run hello-world</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      腾讯云Ubuntu16.04 64位, 安装Docker CE 17.03, 并配置 DaoCloud 加速器
    
    </summary>
    
      <category term="operation" scheme="http://devtor.cn/categories/operation/"/>
    
    
      <category term="Docker" scheme="http://devtor.cn/tags/Docker/"/>
    
      <category term="Linux" scheme="http://devtor.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java Byte数组与十六进制互转</title>
    <link href="http://devtor.cn/technology/java-byte-hex.html"/>
    <id>http://devtor.cn/technology/java-byte-hex.html</id>
    <published>2017-03-10T15:33:04.000Z</published>
    <updated>2017-12-09T07:15:12.258Z</updated>
    
    <content type="html"><![CDATA[<p>这两天写android遇到了进制的编解码问题，记录一下Byte数组与十六进制互转。</p><blockquote><p>Byte数组转十六进制</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">byte2HexString</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        String hex= <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (bytes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Byte b : bytes) &#123;</span><br><span class="line">                hex += String.format(<span class="string">"%02X"</span>, b.intValue() &amp; <span class="number">0xFF</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hex;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>十六进制转Byte数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hexStringToByteArray(String s) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[len / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i += <span class="number">2</span>) &#123;</span><br><span class="line">                data[i / <span class="number">2</span>] = (<span class="keyword">byte</span>) ((Character.digit(s.charAt(i), <span class="number">16</span>) &lt;&lt; <span class="number">4</span>)</span><br><span class="line">                        + Character.digit(s.charAt(i+<span class="number">1</span>), <span class="number">16</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//Log.d("", "Argument(s) for hexStringToByteArray(String s)"+ "was not a hex string");</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这两天写android遇到了进制的编解码问题，记录一下Byte数组与十六进制互转。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Byte数组转十六进制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="technology" scheme="http://devtor.cn/categories/technology/"/>
    
    
      <category term="Java" scheme="http://devtor.cn/tags/Java/"/>
    
  </entry>
  
</feed>
